/*
 * paypaz-openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.paypaz.client.api;

import org.paypaz.client.ApiCallback;
import org.paypaz.client.ApiClient;
import org.paypaz.client.ApiException;
import org.paypaz.client.ApiResponse;
import org.paypaz.client.Configuration;
import org.paypaz.client.Pair;
import org.paypaz.client.ProgressRequestBody;
import org.paypaz.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.paypaz.client.model.CreateWithdrawalRequest;
import org.paypaz.client.model.GetDepositAddressRequest;

import org.paypaz.client.model.QueryDepositOrderRequest;
import org.paypaz.client.model.QueryWithdrawalOrderRequest;
import org.paypaz.client.model.RListBalanceOpenApiVo;
import org.paypaz.client.model.RLong;
import org.paypaz.client.model.RPageDepositOrderOpenApiVo;
import org.paypaz.client.model.RPageWithdrawalOrderOpenApiVo;
import org.paypaz.client.model.RSubWalletAddressOpenApiVo;
import org.paypaz.client.model.RWithdrawalOrderOpenApiVo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaypazBrokerOpenApiApi {
    private ApiClient localVarApiClient;

    public PaypazBrokerOpenApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaypazBrokerOpenApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createSubUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 用户ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubUserCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/createSubUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createSubUserCall(_callback);
        return localVarCall;

    }

    /**
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * @return RLong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 用户ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RLong createSubUser() throws ApiException {
        ApiResponse<RLong> localVarResp = createSubUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * @return ApiResponse&lt;RLong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 用户ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RLong> createSubUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createSubUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RLong>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户 (asynchronously)
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 用户ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubUserAsync(final ApiCallback<RLong> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RLong>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubUser_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 用户ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubUser_0Call(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/createSubUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubUser_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createSubUser_0Call(_callback);
        return localVarCall;

    }

    /**
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * @return RLong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 用户ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RLong createSubUser_0() throws ApiException {
        ApiResponse<RLong> localVarResp = createSubUser_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * @return ApiResponse&lt;RLong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 用户ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RLong> createSubUser_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createSubUser_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RLong>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户 (asynchronously)
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 用户ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubUser_0Async(final ApiCallback<RLong> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubUser_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RLong>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWithdrawal
     * @param createWithdrawalRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWithdrawalCall(CreateWithdrawalRequest createWithdrawalRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createWithdrawalRequest;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/createWithdrawal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWithdrawalValidateBeforeCall(CreateWithdrawalRequest createWithdrawalRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createWithdrawalCall(createWithdrawalRequest, _callback);
        return localVarCall;

    }

    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     * 根据UID发起提币  为指定子用户创建提币订单
     * @param createWithdrawalRequest  (optional)
     * @return RWithdrawalOrderOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RWithdrawalOrderOpenApiVo createWithdrawal(CreateWithdrawalRequest createWithdrawalRequest) throws ApiException {
        ApiResponse<RWithdrawalOrderOpenApiVo> localVarResp = createWithdrawalWithHttpInfo(createWithdrawalRequest);
        return localVarResp.getData();
    }

    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     * 根据UID发起提币  为指定子用户创建提币订单
     * @param createWithdrawalRequest  (optional)
     * @return ApiResponse&lt;RWithdrawalOrderOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RWithdrawalOrderOpenApiVo> createWithdrawalWithHttpInfo(CreateWithdrawalRequest createWithdrawalRequest) throws ApiException {
        okhttp3.Call localVarCall = createWithdrawalValidateBeforeCall(createWithdrawalRequest, null);
        Type localVarReturnType = new TypeToken<RWithdrawalOrderOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据UID发起提币  为指定子用户创建提币订单 (asynchronously)
     * 根据UID发起提币  为指定子用户创建提币订单
     * @param createWithdrawalRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWithdrawalAsync(CreateWithdrawalRequest createWithdrawalRequest, final ApiCallback<RWithdrawalOrderOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWithdrawalValidateBeforeCall(createWithdrawalRequest, _callback);
        Type localVarReturnType = new TypeToken<RWithdrawalOrderOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWithdrawal_0
     * @param createWithdrawalRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWithdrawal_0Call(CreateWithdrawalRequest createWithdrawalRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createWithdrawalRequest;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/createWithdrawal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWithdrawal_0ValidateBeforeCall(CreateWithdrawalRequest createWithdrawalRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createWithdrawal_0Call(createWithdrawalRequest, _callback);
        return localVarCall;

    }

    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     * 根据UID发起提币  为指定子用户创建提币订单
     * @param createWithdrawalRequest  (optional)
     * @return RWithdrawalOrderOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RWithdrawalOrderOpenApiVo createWithdrawal_0(CreateWithdrawalRequest createWithdrawalRequest) throws ApiException {
        ApiResponse<RWithdrawalOrderOpenApiVo> localVarResp = createWithdrawal_0WithHttpInfo(createWithdrawalRequest);
        return localVarResp.getData();
    }

    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     * 根据UID发起提币  为指定子用户创建提币订单
     * @param createWithdrawalRequest  (optional)
     * @return ApiResponse&lt;RWithdrawalOrderOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RWithdrawalOrderOpenApiVo> createWithdrawal_0WithHttpInfo(CreateWithdrawalRequest createWithdrawalRequest) throws ApiException {
        okhttp3.Call localVarCall = createWithdrawal_0ValidateBeforeCall(createWithdrawalRequest, null);
        Type localVarReturnType = new TypeToken<RWithdrawalOrderOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据UID发起提币  为指定子用户创建提币订单 (asynchronously)
     * 根据UID发起提币  为指定子用户创建提币订单
     * @param createWithdrawalRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWithdrawal_0Async(CreateWithdrawalRequest createWithdrawalRequest, final ApiCallback<RWithdrawalOrderOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWithdrawal_0ValidateBeforeCall(createWithdrawalRequest, _callback);
        Type localVarReturnType = new TypeToken<RWithdrawalOrderOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDepositAddress
     * @param getDepositAddressRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值地址信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDepositAddressCall(GetDepositAddressRequest getDepositAddressRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getDepositAddressRequest;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/depositAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDepositAddressValidateBeforeCall(GetDepositAddressRequest getDepositAddressRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDepositAddressCall(getDepositAddressRequest, _callback);
        return localVarCall;

    }

    /**
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * @param getDepositAddressRequest  (optional)
     * @return RSubWalletAddressOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值地址信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RSubWalletAddressOpenApiVo getDepositAddress(GetDepositAddressRequest getDepositAddressRequest) throws ApiException {
        ApiResponse<RSubWalletAddressOpenApiVo> localVarResp = getDepositAddressWithHttpInfo(getDepositAddressRequest);
        return localVarResp.getData();
    }

    /**
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * @param getDepositAddressRequest  (optional)
     * @return ApiResponse&lt;RSubWalletAddressOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值地址信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RSubWalletAddressOpenApiVo> getDepositAddressWithHttpInfo(GetDepositAddressRequest getDepositAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = getDepositAddressValidateBeforeCall(getDepositAddressRequest, null);
        Type localVarReturnType = new TypeToken<RSubWalletAddressOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址 (asynchronously)
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * @param getDepositAddressRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值地址信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDepositAddressAsync(GetDepositAddressRequest getDepositAddressRequest, final ApiCallback<RSubWalletAddressOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDepositAddressValidateBeforeCall(getDepositAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<RSubWalletAddressOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDepositAddress_0
     * @param getDepositAddressRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值地址信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDepositAddress_0Call(GetDepositAddressRequest getDepositAddressRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getDepositAddressRequest;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/depositAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDepositAddress_0ValidateBeforeCall(GetDepositAddressRequest getDepositAddressRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDepositAddress_0Call(getDepositAddressRequest, _callback);
        return localVarCall;

    }

    /**
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * @param getDepositAddressRequest  (optional)
     * @return RSubWalletAddressOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值地址信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RSubWalletAddressOpenApiVo getDepositAddress_0(GetDepositAddressRequest getDepositAddressRequest) throws ApiException {
        ApiResponse<RSubWalletAddressOpenApiVo> localVarResp = getDepositAddress_0WithHttpInfo(getDepositAddressRequest);
        return localVarResp.getData();
    }

    /**
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * @param getDepositAddressRequest  (optional)
     * @return ApiResponse&lt;RSubWalletAddressOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值地址信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RSubWalletAddressOpenApiVo> getDepositAddress_0WithHttpInfo(GetDepositAddressRequest getDepositAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = getDepositAddress_0ValidateBeforeCall(getDepositAddressRequest, null);
        Type localVarReturnType = new TypeToken<RSubWalletAddressOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址 (asynchronously)
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     * @param getDepositAddressRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值地址信息 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDepositAddress_0Async(GetDepositAddressRequest getDepositAddressRequest, final ApiCallback<RSubWalletAddressOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDepositAddress_0ValidateBeforeCall(getDepositAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<RSubWalletAddressOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryBrokerAssets
     * @param tokenId 币种ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> broker资产列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryBrokerAssetsCall(String tokenId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tokenId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenId", tokenId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryBrokerAssetsValidateBeforeCall(String tokenId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = queryBrokerAssetsCall(tokenId, _callback);
        return localVarCall;

    }

    /**
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * @param tokenId 币种ID (optional)
     * @return RListBalanceOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> broker资产列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RListBalanceOpenApiVo queryBrokerAssets(String tokenId) throws ApiException {
        ApiResponse<RListBalanceOpenApiVo> localVarResp = queryBrokerAssetsWithHttpInfo(tokenId);
        return localVarResp.getData();
    }

    /**
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * @param tokenId 币种ID (optional)
     * @return ApiResponse&lt;RListBalanceOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> broker资产列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RListBalanceOpenApiVo> queryBrokerAssetsWithHttpInfo(String tokenId) throws ApiException {
        okhttp3.Call localVarCall = queryBrokerAssetsValidateBeforeCall(tokenId, null);
        Type localVarReturnType = new TypeToken<RListBalanceOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息 (asynchronously)
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * @param tokenId 币种ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> broker资产列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryBrokerAssetsAsync(String tokenId, final ApiCallback<RListBalanceOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryBrokerAssetsValidateBeforeCall(tokenId, _callback);
        Type localVarReturnType = new TypeToken<RListBalanceOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryBrokerAssets_0
     * @param tokenId 币种ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> broker资产列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryBrokerAssets_0Call(String tokenId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tokenId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenId", tokenId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryBrokerAssets_0ValidateBeforeCall(String tokenId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = queryBrokerAssets_0Call(tokenId, _callback);
        return localVarCall;

    }

    /**
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * @param tokenId 币种ID (optional)
     * @return RListBalanceOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> broker资产列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RListBalanceOpenApiVo queryBrokerAssets_0(String tokenId) throws ApiException {
        ApiResponse<RListBalanceOpenApiVo> localVarResp = queryBrokerAssets_0WithHttpInfo(tokenId);
        return localVarResp.getData();
    }

    /**
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * @param tokenId 币种ID (optional)
     * @return ApiResponse&lt;RListBalanceOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> broker资产列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RListBalanceOpenApiVo> queryBrokerAssets_0WithHttpInfo(String tokenId) throws ApiException {
        okhttp3.Call localVarCall = queryBrokerAssets_0ValidateBeforeCall(tokenId, null);
        Type localVarReturnType = new TypeToken<RListBalanceOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息 (asynchronously)
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     * @param tokenId 币种ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> broker资产列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryBrokerAssets_0Async(String tokenId, final ApiCallback<RListBalanceOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryBrokerAssets_0ValidateBeforeCall(tokenId, _callback);
        Type localVarReturnType = new TypeToken<RListBalanceOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryDepositOrders
     * @param queryDepositOrderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDepositOrdersCall(QueryDepositOrderRequest queryDepositOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queryDepositOrderRequest;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/depositOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryDepositOrdersValidateBeforeCall(QueryDepositOrderRequest queryDepositOrderRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = queryDepositOrdersCall(queryDepositOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * @param queryDepositOrderRequest  (optional)
     * @return RPageDepositOrderOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RPageDepositOrderOpenApiVo queryDepositOrders(QueryDepositOrderRequest queryDepositOrderRequest) throws ApiException {
        ApiResponse<RPageDepositOrderOpenApiVo> localVarResp = queryDepositOrdersWithHttpInfo(queryDepositOrderRequest);
        return localVarResp.getData();
    }

    /**
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * @param queryDepositOrderRequest  (optional)
     * @return ApiResponse&lt;RPageDepositOrderOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RPageDepositOrderOpenApiVo> queryDepositOrdersWithHttpInfo(QueryDepositOrderRequest queryDepositOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = queryDepositOrdersValidateBeforeCall(queryDepositOrderRequest, null);
        Type localVarReturnType = new TypeToken<RPageDepositOrderOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表 (asynchronously)
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * @param queryDepositOrderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDepositOrdersAsync(QueryDepositOrderRequest queryDepositOrderRequest, final ApiCallback<RPageDepositOrderOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryDepositOrdersValidateBeforeCall(queryDepositOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<RPageDepositOrderOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryDepositOrders_0
     * @param queryDepositOrderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDepositOrders_0Call(QueryDepositOrderRequest queryDepositOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queryDepositOrderRequest;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/depositOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryDepositOrders_0ValidateBeforeCall(QueryDepositOrderRequest queryDepositOrderRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = queryDepositOrders_0Call(queryDepositOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * @param queryDepositOrderRequest  (optional)
     * @return RPageDepositOrderOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RPageDepositOrderOpenApiVo queryDepositOrders_0(QueryDepositOrderRequest queryDepositOrderRequest) throws ApiException {
        ApiResponse<RPageDepositOrderOpenApiVo> localVarResp = queryDepositOrders_0WithHttpInfo(queryDepositOrderRequest);
        return localVarResp.getData();
    }

    /**
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * @param queryDepositOrderRequest  (optional)
     * @return ApiResponse&lt;RPageDepositOrderOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RPageDepositOrderOpenApiVo> queryDepositOrders_0WithHttpInfo(QueryDepositOrderRequest queryDepositOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = queryDepositOrders_0ValidateBeforeCall(queryDepositOrderRequest, null);
        Type localVarReturnType = new TypeToken<RPageDepositOrderOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表 (asynchronously)
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     * @param queryDepositOrderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 充值订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDepositOrders_0Async(QueryDepositOrderRequest queryDepositOrderRequest, final ApiCallback<RPageDepositOrderOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryDepositOrders_0ValidateBeforeCall(queryDepositOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<RPageDepositOrderOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryWithdrawalOrders
     * @param queryWithdrawalOrderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryWithdrawalOrdersCall(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queryWithdrawalOrderRequest;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/withdrawalOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryWithdrawalOrdersValidateBeforeCall(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = queryWithdrawalOrdersCall(queryWithdrawalOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * @param queryWithdrawalOrderRequest  (optional)
     * @return RPageWithdrawalOrderOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RPageWithdrawalOrderOpenApiVo queryWithdrawalOrders(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest) throws ApiException {
        ApiResponse<RPageWithdrawalOrderOpenApiVo> localVarResp = queryWithdrawalOrdersWithHttpInfo(queryWithdrawalOrderRequest);
        return localVarResp.getData();
    }

    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * @param queryWithdrawalOrderRequest  (optional)
     * @return ApiResponse&lt;RPageWithdrawalOrderOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RPageWithdrawalOrderOpenApiVo> queryWithdrawalOrdersWithHttpInfo(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = queryWithdrawalOrdersValidateBeforeCall(queryWithdrawalOrderRequest, null);
        Type localVarReturnType = new TypeToken<RPageWithdrawalOrderOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表 (asynchronously)
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * @param queryWithdrawalOrderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryWithdrawalOrdersAsync(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest, final ApiCallback<RPageWithdrawalOrderOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryWithdrawalOrdersValidateBeforeCall(queryWithdrawalOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<RPageWithdrawalOrderOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryWithdrawalOrders_0
     * @param queryWithdrawalOrderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryWithdrawalOrders_0Call(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queryWithdrawalOrderRequest;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/withdrawalOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryWithdrawalOrders_0ValidateBeforeCall(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = queryWithdrawalOrders_0Call(queryWithdrawalOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * @param queryWithdrawalOrderRequest  (optional)
     * @return RPageWithdrawalOrderOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RPageWithdrawalOrderOpenApiVo queryWithdrawalOrders_0(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest) throws ApiException {
        ApiResponse<RPageWithdrawalOrderOpenApiVo> localVarResp = queryWithdrawalOrders_0WithHttpInfo(queryWithdrawalOrderRequest);
        return localVarResp.getData();
    }

    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * @param queryWithdrawalOrderRequest  (optional)
     * @return ApiResponse&lt;RPageWithdrawalOrderOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RPageWithdrawalOrderOpenApiVo> queryWithdrawalOrders_0WithHttpInfo(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = queryWithdrawalOrders_0ValidateBeforeCall(queryWithdrawalOrderRequest, null);
        Type localVarReturnType = new TypeToken<RPageWithdrawalOrderOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表 (asynchronously)
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     * @param queryWithdrawalOrderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单分页列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryWithdrawalOrders_0Async(QueryWithdrawalOrderRequest queryWithdrawalOrderRequest, final ApiCallback<RPageWithdrawalOrderOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryWithdrawalOrders_0ValidateBeforeCall(queryWithdrawalOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<RPageWithdrawalOrderOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for withdrawalOrderInfo
     * @param clientWithdrawalId 客户端提币订单ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单详情 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawalOrderInfoCall(String clientWithdrawalId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/withdrawalOrderInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientWithdrawalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientWithdrawalId", clientWithdrawalId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawalOrderInfoValidateBeforeCall(String clientWithdrawalId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientWithdrawalId' is set
        if (clientWithdrawalId == null) {
            throw new ApiException("Missing the required parameter 'clientWithdrawalId' when calling withdrawalOrderInfo(Async)");
        }
        

        okhttp3.Call localVarCall = withdrawalOrderInfoCall(clientWithdrawalId, _callback);
        return localVarCall;

    }

    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * @param clientWithdrawalId 客户端提币订单ID (required)
     * @return RWithdrawalOrderOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单详情 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RWithdrawalOrderOpenApiVo withdrawalOrderInfo(String clientWithdrawalId) throws ApiException {
        ApiResponse<RWithdrawalOrderOpenApiVo> localVarResp = withdrawalOrderInfoWithHttpInfo(clientWithdrawalId);
        return localVarResp.getData();
    }

    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * @param clientWithdrawalId 客户端提币订单ID (required)
     * @return ApiResponse&lt;RWithdrawalOrderOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单详情 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RWithdrawalOrderOpenApiVo> withdrawalOrderInfoWithHttpInfo(String clientWithdrawalId) throws ApiException {
        okhttp3.Call localVarCall = withdrawalOrderInfoValidateBeforeCall(clientWithdrawalId, null);
        Type localVarReturnType = new TypeToken<RWithdrawalOrderOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息 (asynchronously)
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * @param clientWithdrawalId 客户端提币订单ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单详情 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawalOrderInfoAsync(String clientWithdrawalId, final ApiCallback<RWithdrawalOrderOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = withdrawalOrderInfoValidateBeforeCall(clientWithdrawalId, _callback);
        Type localVarReturnType = new TypeToken<RWithdrawalOrderOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for withdrawalOrderInfo_0
     * @param clientWithdrawalId 客户端提币订单ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单详情 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawalOrderInfo_0Call(String clientWithdrawalId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t-api/broker-openapi/v1/op/openapi/withdrawalOrderInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientWithdrawalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientWithdrawalId", clientWithdrawalId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawalOrderInfo_0ValidateBeforeCall(String clientWithdrawalId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientWithdrawalId' is set
        if (clientWithdrawalId == null) {
            throw new ApiException("Missing the required parameter 'clientWithdrawalId' when calling withdrawalOrderInfo_0(Async)");
        }
        

        okhttp3.Call localVarCall = withdrawalOrderInfo_0Call(clientWithdrawalId, _callback);
        return localVarCall;

    }

    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * @param clientWithdrawalId 客户端提币订单ID (required)
     * @return RWithdrawalOrderOpenApiVo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单详情 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RWithdrawalOrderOpenApiVo withdrawalOrderInfo_0(String clientWithdrawalId) throws ApiException {
        ApiResponse<RWithdrawalOrderOpenApiVo> localVarResp = withdrawalOrderInfo_0WithHttpInfo(clientWithdrawalId);
        return localVarResp.getData();
    }

    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * @param clientWithdrawalId 客户端提币订单ID (required)
     * @return ApiResponse&lt;RWithdrawalOrderOpenApiVo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单详情 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RWithdrawalOrderOpenApiVo> withdrawalOrderInfo_0WithHttpInfo(String clientWithdrawalId) throws ApiException {
        okhttp3.Call localVarCall = withdrawalOrderInfo_0ValidateBeforeCall(clientWithdrawalId, null);
        Type localVarReturnType = new TypeToken<RWithdrawalOrderOpenApiVo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息 (asynchronously)
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     * @param clientWithdrawalId 客户端提币订单ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 提币订单详情 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawalOrderInfo_0Async(String clientWithdrawalId, final ApiCallback<RWithdrawalOrderOpenApiVo> _callback) throws ApiException {

        okhttp3.Call localVarCall = withdrawalOrderInfo_0ValidateBeforeCall(clientWithdrawalId, _callback);
        Type localVarReturnType = new TypeToken<RWithdrawalOrderOpenApiVo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
