package org.paypaz.client.api;

/*
 * paypaz-openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.paypaz.client.ApiClient;
import org.paypaz.client.ApiException;
import org.paypaz.client.model.*;

import java.math.BigDecimal;
import java.util.UUID;

/**
 * API tests for PaypazBrokerOpenApiApi
 */
@Ignore
public class PaypazOpenAPITest  {

    private static  final PaypazBrokerOpenApiApi api;

    static {
        ApiClient localVarApiClient = new ApiClient();
        localVarApiClient.setBasePath("https://brokerapi-test.bdy.tech");
        localVarApiClient.setAPI_KEY("MCowBQYDK2VwAyEAsZzrsH83nTj9vFMw1oCfTF0broGwZq5HJ0vy68w3r4U=");
        localVarApiClient.setAPI_SECRET("MC4CAQAwBQYDK2VwBCIEIC9OliH2+vs+ADvmrJieQPOGQwWnNesziBeiGAHsAI9M");
        api = new PaypazBrokerOpenApiApi(localVarApiClient);
    }


    /**
     * 获取或创建充值地址
     *
     * 获取或创建充值地址  &lt;p&gt;为指定子用户和币种获取充值地址，如果该币种地址不存在，则创建新地址&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositAddressTest() throws ApiException {
        GetDepositAddressRequest getDepositAddressRequest = new GetDepositAddressRequest();
        getDepositAddressRequest.setClientSubUserId("14455600");
        getDepositAddressRequest.setTokenId("TBSC_USDT3");
        RSubWalletAddressOpenApiVo response = api.getDepositAddress(getDepositAddressRequest);
        Assert.assertEquals(response.getCode().intValue(),200);
        Assert.assertNotNull(response.getData().getAddress());

//        System.out.println(response.toString());

        // TODO: test validations
    }

    /**
     * 查询Broker下所有资产信息
     *
     * 查询Broker下所有资产信息  &lt;p&gt;查询当前OpenAPI用户下指定币种或所有币种的资产信息&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */

    @Test
    public void queryBrokerAssetsTest() throws ApiException {
        String tokenId = "BTC";
        RListBalanceOpenApiVo response = api.queryBrokerAssets(tokenId);
        Assert.assertEquals(response.getCode().intValue(),200);
        Assert.assertFalse(response.getData().isEmpty());
        Assert.assertEquals(response.getData().get(0).getTokenId(),tokenId);
        System.out.println(response.toString());

        // TODO: test validations
    }

    /**
     * 查询Broker下所有资产信息
     *
     * 查询Broker下所有资产信息  &lt;p&gt;查询当前OpenAPI用户下指定币种或所有币种的资产信息&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryBrokerAssets_0Test() throws ApiException {
        String tokenId = null;
        RListBalanceOpenApiVo response = api.queryBrokerAssets_0(tokenId);
        Assert.assertEquals(response.getCode().intValue(),200);
        Assert.assertTrue(response.getData().size()>0);

        System.out.println(response.toString());
        // TODO: test validations
    }


    /**
     * 分页查询充值订单
     *
     * 确实必要值的验证
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryDepositOrders_0Test() throws ApiException {
        QueryDepositOrderRequest queryDepositOrderRequest = null;
        RPageDepositOrderOpenApiVo response = api.queryDepositOrders_0(queryDepositOrderRequest);
        Assert.assertEquals(response.getCode().intValue(),500100000);

        // TODO: test validations
    }

    /**
     * 分页查询充值订单
     *
     * 分页查询充值订单  &lt;p&gt;根据条件查询充值订单列表，支持分页、时间范围、币种、钱包地址等筛选条件&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryDepositOrdersTest() throws ApiException {
        QueryDepositOrderRequest queryDepositOrderRequest = new QueryDepositOrderRequest();
        queryDepositOrderRequest.setClientSubUserId("14455600");
        queryDepositOrderRequest.setOrderNo("96ce5657-108c-473e-b612-e7886d499a46");
//        queryDepositOrderRequest.setWalletAddress("0x699f3e1fa68c6f6f78ba7ceb9937761d32f76942");
        RPageDepositOrderOpenApiVo response = api.queryDepositOrders(queryDepositOrderRequest);
        Assert.assertEquals(response.getCode().intValue(),200);
        Assert.assertTrue(response.getData().size()>0);

        System.out.println(response.toString());

        // TODO: test validations
    }


    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWithdrawalTest() throws ApiException {
        CreateWithdrawalRequest createWithdrawalRequest = new CreateWithdrawalRequest();
        String clientOrderId = UUID.randomUUID().toString().replace("-", "");
        createWithdrawalRequest.setClientWithdrawalId(clientOrderId);
        createWithdrawalRequest.setAddress("0xa8c5eea944c3af945203e18cf990905519a158ad");
        createWithdrawalRequest.setAmount("0.0001");
        createWithdrawalRequest.setTokenId("TBSC_USDT3");
        createWithdrawalRequest.setClientSubUserId("14455600");
        createWithdrawalRequest.setTwoFactorAuthentication(Boolean.TRUE);

        RWithdrawalOrderOpenApiVo response = api.createWithdrawal(createWithdrawalRequest);
        Assert.assertEquals(response.getCode().intValue(),500100000);
        System.out.println(response.toString());
        // TODO: test validations
    }


    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWithdrawalTest0() throws ApiException {
        CreateWithdrawalRequest createWithdrawalRequest = new CreateWithdrawalRequest();
        String clientOrderId = UUID.randomUUID().toString().replace("-", "");
        createWithdrawalRequest.setClientWithdrawalId(clientOrderId);
        createWithdrawalRequest.setAddress("0xa8c5eea944c3af945203e18cf990905519a158ad");
        createWithdrawalRequest.setAmount("0.05");
        createWithdrawalRequest.setTokenId("TBSC_USDT3");
        createWithdrawalRequest.setClientSubUserId("14455600");
        createWithdrawalRequest.setTwoFactorAuthentication(Boolean.TRUE);

        RWithdrawalOrderOpenApiVo response = api.createWithdrawal(createWithdrawalRequest);
        Assert.assertEquals(response.getCode().intValue(),200);
        Assert.assertEquals(response.getData().getTokenId(),"BTC");
        System.out.println(response.toString());
        // TODO: test validations
    }



    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryWithdrawalOrdersTest() throws ApiException {
        QueryWithdrawalOrderRequest queryWithdrawalOrderRequest = new QueryWithdrawalOrderRequest();
        queryWithdrawalOrderRequest.setClientSubUserId("14455600");
//        queryWithdrawalOrderRequest.setAddress("no");
        RPageWithdrawalOrderOpenApiVo response = api.queryWithdrawalOrders(queryWithdrawalOrderRequest);
        Assert.assertEquals(response.getCode().intValue(),200);
        Assert.assertTrue(response.getData().size()>0);

        System.out.println(response.toString());

        // TODO: test validations
    }



    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryWithdrawalOrders_0Test() throws ApiException {
        QueryWithdrawalOrderRequest queryWithdrawalOrderRequest = new QueryWithdrawalOrderRequest() ;
        queryWithdrawalOrderRequest.setClientSubUserId("14455600");
        queryWithdrawalOrderRequest.setTokenId("USDT");
        RPageWithdrawalOrderOpenApiVo response = api.queryWithdrawalOrders_0(queryWithdrawalOrderRequest);
        Assert.assertEquals(response.getCode().intValue(),200);
        Assert.assertTrue(response.getData().size()==0);

        System.out.println(response.toString());
        // TODO: test validations
    }

    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void withdrawalOrderInfoTest() throws ApiException {
        String clientWithdrawalId = "2b7325c89fe841c0bab6d932129e8655";
        RWithdrawalOrderOpenApiVo response = api.withdrawalOrderInfo(clientWithdrawalId);
        Assert.assertEquals(response.getCode().intValue(),200);
        Assert.assertEquals(response.getData().getTokenId(),"BTC");
        System.out.println(response.toString());
        // TODO: test validations
    }



}
