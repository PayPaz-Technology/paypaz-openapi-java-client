/*
 * paypaz-openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.paypaz.client.api;

import org.junit.Ignore;
import org.junit.Test;
import org.paypaz.client.ApiClient;
import org.paypaz.client.ApiException;
import org.paypaz.client.model.*;

import java.math.BigDecimal;
import java.util.UUID;

/**
 * API tests for PaypazBrokerOpenApiApi
 */
@Ignore
public class PaypazBrokerOpenApiApiDevTest {

    private static  final PaypazBrokerOpenApiApi api;

    static {
        ApiClient localVarApiClient = new ApiClient();
        localVarApiClient.setBasePath("https://brokerapi-dev.bdy.tech");
        localVarApiClient.setAPI_KEY("MCowBQYDK2VwAyEAXmkBih05iCSED2FWQGhHfRKvCEdPvUxKODoThg9K0KA");
        localVarApiClient.setAPI_SECRET("MC4CAQAwBQYDK2VwBCIEILgovvekSbdI9uLp/TJKJO8mgn9TynZLT+q4EyQR");
        api = new PaypazBrokerOpenApiApi(localVarApiClient);
    }





    
    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWithdrawalTest() throws ApiException {
        CreateWithdrawalRequest createWithdrawalRequest = new CreateWithdrawalRequest();
        String clientOrderId = UUID.randomUUID().toString().replace("-", "");
        createWithdrawalRequest.setClientWithdrawalId(clientOrderId);
        createWithdrawalRequest.setAddress("0x2c90a96735d851c6728fb6949264b88198b5dc6c");
        createWithdrawalRequest.setAmount("0.0001");
        createWithdrawalRequest.setTokenId("TBSC_BNB");
        createWithdrawalRequest.setClientSubUserId("121212321");
        createWithdrawalRequest.setTwoFactorAuthentication(Boolean.TRUE);

        RWithdrawalOrderOpenApiVo response = api.createWithdrawal(createWithdrawalRequest);
        System.out.println(response.toString());
        // TODO: test validations
    }
    

    
    /**
     * 获取或创建充值地址  
     *
     * 获取或创建充值地址  &lt;p&gt;为指定子用户和币种获取充值地址，如果该币种地址不存在，则创建新地址&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositAddressTest() throws ApiException {
        GetDepositAddressRequest getDepositAddressRequest = new GetDepositAddressRequest();
        getDepositAddressRequest.setClientSubUserId("111111123");
        getDepositAddressRequest.setTokenId("BTC");
        RSubWalletAddressOpenApiVo response = api.getDepositAddress(getDepositAddressRequest);

        System.out.println(response.toString());

        // TODO: test validations
    }
    

    /**
     * 查询Broker下所有资产信息  
     *
     * 查询Broker下所有资产信息  &lt;p&gt;查询当前OpenAPI用户下指定币种或所有币种的资产信息&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryBrokerAssetsTest() throws ApiException {
        String tokenId = "TBSC_BNB";
        RListBalanceOpenApiVo response = api.queryBrokerAssets(tokenId);
        System.out.println(response.toString());

        // TODO: test validations
    }
    
    /**
     * 查询Broker下所有资产信息  
     *
     * 查询Broker下所有资产信息  &lt;p&gt;查询当前OpenAPI用户下指定币种或所有币种的资产信息&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryBrokerAssets_0Test() throws ApiException {
        String tokenId = null;
        RListBalanceOpenApiVo response = api.queryBrokerAssets_0(tokenId);
        System.out.println(response.toString());
        // TODO: test validations
    }
    
    /**
     * 分页查询充值订单  
     *
     * 分页查询充值订单  &lt;p&gt;根据条件查询充值订单列表，支持分页、时间范围、币种、钱包地址等筛选条件&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryDepositOrdersTest() throws ApiException {
        QueryDepositOrderRequest queryDepositOrderRequest = new QueryDepositOrderRequest();
        queryDepositOrderRequest.setClientSubUserId("121212321");
        RPageDepositOrderOpenApiVo response = api.queryDepositOrders(queryDepositOrderRequest);
        System.out.println(response.toString());

        // TODO: test validations
    }
    
    /**
     * 分页查询充值订单  
     *
     * 分页查询充值订单  &lt;p&gt;根据条件查询充值订单列表，支持分页、时间范围、币种、钱包地址等筛选条件&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryDepositOrders_0Test() throws ApiException {
        QueryDepositOrderRequest queryDepositOrderRequest = null;
        RPageDepositOrderOpenApiVo response = api.queryDepositOrders_0(queryDepositOrderRequest);

        // TODO: test validations
    }
    
    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryWithdrawalOrdersTest() throws ApiException {
        QueryWithdrawalOrderRequest queryWithdrawalOrderRequest = new QueryWithdrawalOrderRequest();
        queryWithdrawalOrderRequest.setClientSubUserId("121212321");
        RPageWithdrawalOrderOpenApiVo response = api.queryWithdrawalOrders(queryWithdrawalOrderRequest);
        System.out.println(response.toString());

        // TODO: test validations
    }
    
    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryWithdrawalOrders_0Test() throws ApiException {
        QueryWithdrawalOrderRequest queryWithdrawalOrderRequest = new QueryWithdrawalOrderRequest() ;
        queryWithdrawalOrderRequest.setClientSubUserId("121212321");
        RPageWithdrawalOrderOpenApiVo response = api.queryWithdrawalOrders_0(queryWithdrawalOrderRequest);
        System.out.println(response.toString());
        // TODO: test validations
    }
    
    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void withdrawalOrderInfoTest() throws ApiException {
        String clientWithdrawalId = "1121212";
        RWithdrawalOrderOpenApiVo response = api.withdrawalOrderInfo(clientWithdrawalId);
        System.out.println(response.toString());
        // TODO: test validations
    }
    

    
}
