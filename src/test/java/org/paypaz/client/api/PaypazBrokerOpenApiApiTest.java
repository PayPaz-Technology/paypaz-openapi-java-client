/*
 * paypaz-openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.paypaz.client.api;

import org.paypaz.client.ApiException;
import org.paypaz.client.model.CreateWithdrawalRequest;
import org.paypaz.client.model.GetDepositAddressRequest;
import org.paypaz.client.model.QueryDepositOrderRequest;
import org.paypaz.client.model.QueryWithdrawalOrderRequest;
import org.paypaz.client.model.RListBalanceOpenApiVo;
import org.paypaz.client.model.RPageDepositOrderOpenApiVo;
import org.paypaz.client.model.RPageWithdrawalOrderOpenApiVo;
import org.paypaz.client.model.RSubWalletAddressOpenApiVo;
import org.paypaz.client.model.RWithdrawalOrderOpenApiVo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaypazBrokerOpenApiApi
 */
@Ignore
public class PaypazBrokerOpenApiApiTest {



    private final PaypazBrokerOpenApiApi api = new PaypazBrokerOpenApiApi();

    
    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWithdrawalTest() throws ApiException {
        CreateWithdrawalRequest createWithdrawalRequest = null;
        RWithdrawalOrderOpenApiVo response = api.createWithdrawal(createWithdrawalRequest);

        // TODO: test validations
    }
    
    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWithdrawal_0Test() throws ApiException {
        CreateWithdrawalRequest createWithdrawalRequest = null;
        RWithdrawalOrderOpenApiVo response = api.createWithdrawal_0(createWithdrawalRequest);

        // TODO: test validations
    }
    
    /**
     * 获取或创建充值地址  
     *
     * 获取或创建充值地址  &lt;p&gt;为指定子用户和币种获取充值地址，如果该币种地址不存在，则创建新地址&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositAddressTest() throws ApiException {
        GetDepositAddressRequest getDepositAddressRequest = null;
        RSubWalletAddressOpenApiVo response = api.getDepositAddress(getDepositAddressRequest);

        // TODO: test validations
    }
    
    /**
     * 获取或创建充值地址  
     *
     * 获取或创建充值地址  &lt;p&gt;为指定子用户和币种获取充值地址，如果该币种地址不存在，则创建新地址&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositAddress_0Test() throws ApiException {
        GetDepositAddressRequest getDepositAddressRequest = null;
        RSubWalletAddressOpenApiVo response = api.getDepositAddress_0(getDepositAddressRequest);

        // TODO: test validations
    }
    
    /**
     * 查询Broker下所有资产信息  
     *
     * 查询Broker下所有资产信息  &lt;p&gt;查询当前OpenAPI用户下指定币种或所有币种的资产信息&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryBrokerAssetsTest() throws ApiException {
        String tokenId = null;
        RListBalanceOpenApiVo response = api.queryBrokerAssets(tokenId);

        // TODO: test validations
    }
    
    /**
     * 查询Broker下所有资产信息  
     *
     * 查询Broker下所有资产信息  &lt;p&gt;查询当前OpenAPI用户下指定币种或所有币种的资产信息&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryBrokerAssets_0Test() throws ApiException {
        String tokenId = null;
        RListBalanceOpenApiVo response = api.queryBrokerAssets_0(tokenId);

        // TODO: test validations
    }
    
    /**
     * 分页查询充值订单  
     *
     * 分页查询充值订单  &lt;p&gt;根据条件查询充值订单列表，支持分页、时间范围、币种、钱包地址等筛选条件&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryDepositOrdersTest() throws ApiException {
        QueryDepositOrderRequest queryDepositOrderRequest = null;
        RPageDepositOrderOpenApiVo response = api.queryDepositOrders(queryDepositOrderRequest);

        // TODO: test validations
    }
    
    /**
     * 分页查询充值订单  
     *
     * 分页查询充值订单  &lt;p&gt;根据条件查询充值订单列表，支持分页、时间范围、币种、钱包地址等筛选条件&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryDepositOrders_0Test() throws ApiException {
        QueryDepositOrderRequest queryDepositOrderRequest = null;
        RPageDepositOrderOpenApiVo response = api.queryDepositOrders_0(queryDepositOrderRequest);

        // TODO: test validations
    }
    
    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryWithdrawalOrdersTest() throws ApiException {
        QueryWithdrawalOrderRequest queryWithdrawalOrderRequest = null;
        RPageWithdrawalOrderOpenApiVo response = api.queryWithdrawalOrders(queryWithdrawalOrderRequest);

        // TODO: test validations
    }
    
    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryWithdrawalOrders_0Test() throws ApiException {
        QueryWithdrawalOrderRequest queryWithdrawalOrderRequest = null;
        RPageWithdrawalOrderOpenApiVo response = api.queryWithdrawalOrders_0(queryWithdrawalOrderRequest);

        // TODO: test validations
    }
    
    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void withdrawalOrderInfoTest() throws ApiException {
        String clientWithdrawalId = null;
        RWithdrawalOrderOpenApiVo response = api.withdrawalOrderInfo(clientWithdrawalId);

        // TODO: test validations
    }
    
    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void withdrawalOrderInfo_0Test() throws ApiException {
        String clientWithdrawalId = null;
        RWithdrawalOrderOpenApiVo response = api.withdrawalOrderInfo_0(clientWithdrawalId);

        // TODO: test validations
    }
    
}
