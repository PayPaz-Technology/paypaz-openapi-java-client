/*
 * paypaz-openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.paypaz.client.api;

import org.junit.Before;
import org.paypaz.client.ApiClient;
import org.paypaz.client.ApiException;
import org.paypaz.client.model.CreateWithdrawalRequest;
import org.paypaz.client.model.GetDepositAddressRequest;

import org.paypaz.client.model.QueryDepositOrderRequest;
import org.paypaz.client.model.QueryWithdrawalOrderRequest;
import org.paypaz.client.model.RListBalanceOpenApiVo;
import org.paypaz.client.model.RLong;
import org.paypaz.client.model.RPageDepositOrderOpenApiVo;
import org.paypaz.client.model.RPageWithdrawalOrderOpenApiVo;
import org.paypaz.client.model.RSubWalletAddressOpenApiVo;
import org.paypaz.client.model.RWithdrawalOrderOpenApiVo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.*;

/**
 * API tests for PaypazBrokerOpenApiApi
 */
@Ignore
public class PaypazBrokerOpenApiApiTest {

    private  PaypazBrokerOpenApiApi  api = null;

    @Before
    public void setUp() throws Exception {

        ApiClient apiClient = new ApiClient();
        apiClient.setAPI_KEY("MCowBQYDK2VwAyEAXmkBih05iCSED2FWQGhHfRKvCEdPvUxKODoThg9K0KA");
        apiClient.setAPI_SECRET("MC4CAQAwBQYDK2VwBCIEILgovvekSbdI9uLp/TJKJO8mgn9TynZLT+q4EyQR");
        apiClient.setBasePath("https://brokerapi-dev.bdy.tech");
        api = new PaypazBrokerOpenApiApi(apiClient);
    }

    /**
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     *
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubUserTest() throws ApiException {
        RLong response = api.createSubUser();

        // TODO: test validations
    }
    
    /**
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     *
     * 创建子用户UID  为当前OpenAPI用户创建一个新的子用户
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubUser_0Test() throws ApiException {
        RLong response = api.createSubUser_0();

        // TODO: test validations
    }
    
    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWithdrawalTest() throws ApiException {

        long subUid = 449267154217741487L;
        String clientOrderId = UUID.randomUUID().toString().replace("-", "");
        CreateWithdrawalRequest createWithdrawalRequest =  new CreateWithdrawalRequest();
        createWithdrawalRequest.setSubUid(subUid+"");
        createWithdrawalRequest.setTokenId("TBSC_BNB");
        createWithdrawalRequest.setAmount("0.001045");
        createWithdrawalRequest.setAddress("0x2c90a96735d851c6728fb6949264b88198b5dc6c");
        createWithdrawalRequest.setClientWithdrawalId(clientOrderId);
        RWithdrawalOrderOpenApiVo response = api.createWithdrawal(createWithdrawalRequest);
        System.out.println(response.toString());

        // TODO: test validations
    }
    
    /**
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * 根据UID发起提币  为指定子用户创建提币订单
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWithdrawal_0Test() throws ApiException {
        CreateWithdrawalRequest createWithdrawalRequest = null;
        RWithdrawalOrderOpenApiVo response = api.createWithdrawal_0(createWithdrawalRequest);

        // TODO: test validations
    }
    
    /**
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     *
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositAddressTest() throws ApiException {
        GetDepositAddressRequest getDepositAddressRequest = null;
        RSubWalletAddressOpenApiVo response = api.getDepositAddress(getDepositAddressRequest);

        // TODO: test validations
    }
    
    /**
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     *
     * 根据子用户UID和tokenID获取充值地址  为指定子用户和币种获取充值地址，如果不存在则创建新地址
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositAddress_0Test() throws ApiException {
        GetDepositAddressRequest getDepositAddressRequest = null;
        RSubWalletAddressOpenApiVo response = api.getDepositAddress_0(getDepositAddressRequest);

        // TODO: test validations
    }
    
    /**
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     *
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryBrokerAssetsTest() throws ApiException {
        String tokenId = null;
        RListBalanceOpenApiVo response = api.queryBrokerAssets(tokenId);

        // TODO: test validations
    }
    
    /**
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     *
     * 根据tokenId查询该broker下所有资产  查询当前OpenAPI用户下指定币种或所有币种的资产信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryBrokerAssets_0Test() throws ApiException {
        String tokenId = null;
        RListBalanceOpenApiVo response = api.queryBrokerAssets_0(tokenId);

        // TODO: test validations
    }
    
    /**
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     *
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryDepositOrdersTest() throws ApiException {
        QueryDepositOrderRequest queryDepositOrderRequest = null;
        RPageDepositOrderOpenApiVo response = api.queryDepositOrders(queryDepositOrderRequest);

        // TODO: test validations
    }
    
    /**
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     *
     * 根据UID或地址查询充值订单  分页查询指定条件下的充值订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryDepositOrders_0Test() throws ApiException {
        QueryDepositOrderRequest queryDepositOrderRequest = null;
        RPageDepositOrderOpenApiVo response = api.queryDepositOrders_0(queryDepositOrderRequest);

        // TODO: test validations
    }
    
    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryWithdrawalOrdersTest() throws ApiException {
        QueryWithdrawalOrderRequest queryWithdrawalOrderRequest = null;
        RPageWithdrawalOrderOpenApiVo response = api.queryWithdrawalOrders(queryWithdrawalOrderRequest);

        // TODO: test validations
    }
    
    /**
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * 根据subUID、地址、订单号查询提币订单  分页查询指定条件下的提币订单列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryWithdrawalOrders_0Test() throws ApiException {
        QueryWithdrawalOrderRequest queryWithdrawalOrderRequest = null;
        RPageWithdrawalOrderOpenApiVo response = api.queryWithdrawalOrders_0(queryWithdrawalOrderRequest);

        // TODO: test validations
    }
    
    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void withdrawalOrderInfoTest() throws ApiException {
        String clientWithdrawalId = "1fe9aaa9594c4ec9b932f968382d83dc";
        RWithdrawalOrderOpenApiVo response = api.withdrawalOrderInfo(clientWithdrawalId);
        System.out.println(response);

        // TODO: test validations
    }
    
    /**
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * 查询提币订单详情  根据客户端提币订单ID查询提币订单详细信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void withdrawalOrderInfo_0Test() throws ApiException {
        String clientWithdrawalId = null;
        RWithdrawalOrderOpenApiVo response = api.withdrawalOrderInfo_0(clientWithdrawalId);

        // TODO: test validations
    }
    
}
